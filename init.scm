(import (srfi 1))
(import (kawa pprint))

(define drumkit 
  '(( inst-Hi-Hat-Free             36 "Hi Hat Free"                )
    ( inst-Hi-Hat-Opened           37 "Hi Hat Opened"              )
    ( inst-SB-HatBrushOpA1         38 "SB HatBrushOpA1"            )
    ( inst-SB-HatBrushChk          39 "SB HatBrushChk"             )
    ( inst-SB-HatBrushClA1         40 "SB HatBrushClA1"            )
    ( inst-SB-HatBrushSplA1        41 "SB HatBrushSplA1"           )
    ( inst-Sabian-Hat-Semi-Open    42 "Sabian Hat Semi-Open"       )
    ( inst-Sabian-Hat-Pedal        43 "Sabian Hat Pedal"           )
    ( inst-Sabian-Hat-Swish        44 "Sabian Hat Swish"           )
    ( inst-Sabian-Hat-Choke        45 "Sabian Hat Choke"           )
    ( inst-Sabian-Hat-Open         46 "Sabian Hat Open"            )
    ( inst-SB-Snr7BrusH            47 "SB Snr7BrusH"               )
    ( inst-SB-Snr7BrusPA2          48 "SB Snr7BrusPA2"             )
    ( inst-SB-Snr7BrusPA3          49 "SB Snr7BrusPA3"             )
    ( inst-SB-Snr7BrusPA4          50 "SB Snr7BrusPA4"             )
    ( inst-SB-Snr7BrusPA5          51 "SB Snr7BrusPA5"             )
    ( inst-SB-Snr7BrusPA1          52 "SB Snr7BrusPA1"             )
    ( inst-SB-Snr7BrusPA6          53 "SB Snr7BrusPA6"             )
    ( inst-SB-Snr7BrusPA7          54 "SB Snr7BrusPA7"             )
    ( inst-Stick0                  55 "Stick"                      )
    ( inst-Snare-Dry               56 "Snare Dry"                  )
    ( inst-Snare1                  57 "Snare1"                     )
    ( inst-Snare2                  58 "Snare2"                     )
    ( inst-Snare-Jazz              59 "Snare Jazz"                 )
    ( inst-snare-2                 60 "snare 2"                    )
    ( inst-snare-4                 61 "snare 4"                    )
    ( inst-24-Snare-11             62 "24-Snare-11"                )
    ( inst-sn-606                  63 "sn 606"                     )
    ( inst-sn-33                   64 "sn 33"                      )
    ( inst-sn-55                   65 "sn 55"                      )
    ( inst-909-clap                66 "909 clap"                   )
    ( inst-Hand-Clap               67 "Hand Clap"                  )
    ( inst-Kick                    68 "Kick"                       )
    ( inst-Kick-Short              69 "Kick Short"                 )
    ( inst-Kick-Long               70 "Kick Long"                  )
    ( inst-SB-Kik18openA1          71 "SB Kik18openA1"             )
    ( inst-SB-Kik22psoA1           72 "SB Kik22psoA1"              )
    ( inst-Ride                    73 "Ride"                       )
    ( inst-Ride-Bell               74 "Ride Bell"                  )
    ( inst-Ride-2                  75 "Ride 2"                     )
    ( inst-Ride-Jazz               76 "Ride Jazz"                  )
    ( inst-Ride-Rock               77 "Ride Rock"                  )
    ( inst-SB-Ride1Brush           78 "SB Ride1Brush"              )
    ( inst-SB-Ride2Brush           79 "SB Ride2Brush"              )
    ( inst-SB-Crash2BA1            80 "SB Crash2BA1"               )
    ( inst-SB-Crash1BA1            81 "SB Crash1BA1"               )
    ( inst-Paiste-Ride             82 "Paiste Ride"                )
    ( inst-Paiste-Ride-Flink       83 "Paiste Ride Flink"          )
    ( inst-Paiste-Bell             84 "Paiste Bell"                )
    ( inst-Sabian-Crash            85 "Sabian Crash"               )
    ( inst-Sabian-Crash-Flink      86 "Sabian Crash Flink"         )
    ( inst-Zildjian-Splash         87 "Zildjian Splash"            )
    ( inst-Zildjian-Splash-Choke   88 "Zildjian Splash Choke"      )
    ( inst-Crash-Jazz              89 "Crash Jazz"                 )
    ( inst-Crash                   90 "Crash"                      )
    ( inst-Sizzle-Cymbal           91 "Sizzle Cymbal"              )
    ( inst-Crash-Cymbal            92 "Crash Cymbal"               )
    ( inst-SB-Ride1BrushRoll2      93 "SB Ride1BrushRoll2"         )
    ( inst-SB-Ride1BrushRoll       94 "SB Ride1BrushRoll"          )
    ( inst-Djembe1-Tone            95 "Djembe1 Tone"               )
    ( inst-Djembe2-Slap            96 "Djembe2 Slap"               )
    ( inst-Djembe2-Bass            97 "Djembe2 Bass"               )
    ( inst-High-Tom                98 "High Tom"                   )
    ( inst-Mid-Tom                 99 "Mid Tom"                    )
    ( inst-Floor-Tom              100 "Floor Tom"                  )
    ( inst-SB-TomB10in            101 "SB TomB10in"                )
    ( inst-SB-TomB12in            102 "SB TomB12in"                )
    ( inst-SB-TomB14in            103 "SB TomB14in"                )
    ( inst-SB-TomB16in            104 "SB TomB16in"                )
    ( inst-Cowbell                105 "Cowbell"                    )
    ( inst-Kenkeni1-Bell-Hit      106 "Kenkeni1 Bell Hit"          )
    ( inst-Kenkeni1-Bell-Mute     107 "Kenkeni1 Bell Mute"         )
    ( inst-Dununba1-Bell          108 "Dununba1 Bell"              )
    ( inst-Dununba1-Bell-Mute     109 "Dununba1 Bell Mute"         )))


; variables
(for-each (lambda (x)
            (eval (list 
                   'define 
                   (list-ref x 0)
                   (list-ref x 1)
                   ))
            ) drumkit )


; incremental keywords
(define (session-init #!optional kawapad)
  (if kawapad
    (let* ((link (lambda(x y)
                   (kawapad:textual-increment:add-incremental-symbol (car x) (car y)))))
      (let ((last-elem #f))
        (for-each (lambda (curr-elem)
                    (if last-elem
                      ;then
                      (link last-elem curr-elem)
                      ;else
                      )
                    (set! last-elem curr-elem)) drumkit)
        (link (last drumkit ) (first drumkit))))))


(define (define-if-not-exists k v)
  (if (environment-bound? (interaction-environment) k )
      #f
      (eval (list 'define k (list 'quote v)))))

(define-if-not-exists 'all-newp '() )
(define (clear-newp)
  (for-each (lambda (x) (kilp x) ) all-newp )
  (set! all-newp '() )
  (sleep 1000))
(define (add-newp v)
  (set! all-newp (xcons all-newp v)))


(import (lamu procs))
(import (lamu evaluators))


(define (session-start)
  (add-newp (newp dir: #!current-dir "hydrogen"     "--song"   "./h2-drumkit.h2song" ))
  (add-newp (newp dir: #!current-dir "calfjackhost" "--client" "calf-counter" "--load" "./calf-counter.xml" ) )
  (add-newp (newp dir: #!current-dir "calfjackhost" "--client" "calf-fluidsynth-bass" "--load" "./calf-bass.xml" ))
  (add-newp (newp dir: #!current-dir "calfjackhost" "--client" "calf-fluidsynth" "--load" "./calf-fluidsynth.xml" ))
  (add-newp (newp dir: #!current-dir "calfjackhost" "--client" "calf-reverb" "--load" "./calf-reverb.xml" ))
  (add-newp (newp dir: #!current-dir "zynaddsubfx" "--input" "jack" "--output" "jack" "--named" "quasijazzer0" "--load=./zynaddsubfx.xmz" ))
  
  (sleep 5000)  
  (open          "pulsar" )
  (open-output   "h2" "counter" "fluidsynth" "fluidsynth-bass" "zyn" )
  (open-input    "i0"  "i1"  )
  (set-tempo 150)
  (putt (newt 'main 1 (synct 'i))  )
  (connect  "pulsar:h2"              "hydrogen-midi:RX" )
  (connect  "pulsar:counter"         "calf-counter:fluidsynth MIDI In" )
  (connect  "pulsar:fluidsynth"      "calf-fluidsynth:fluidsynth MIDI In" )
  (connect  "pulsar:fluidsynth-bass" "calf-fluidsynth-bass:fluidsynth MIDI In" )
  (connect  "pulsar:zyn"             "zynaddsubfx_quasijazzer0:midi_input" )
  
  (connect  "calf-counter:fluidsynth Out #1"    "system:playback_1" )
  (connect  "calf-counter:fluidsynth Out #2"    "system:playback_2" )
  (connect  "calf-fluidsynth:fluidsynth Out #1" "system:playback_1" )
  (connect  "calf-fluidsynth:fluidsynth Out #2" "system:playback_2" )
  (connect  "calf-fluidsynth-bass:fluidsynth Out #1" "calf-fluidsynth-bass:exciter In #1" )
  (connect  "calf-fluidsynth-bass:fluidsynth Out #2" "calf-fluidsynth-bass:exciter In #2" )
  (connect  "calf-fluidsynth-bass:exciter Out #1" "system:playback_1" )
  (connect  "calf-fluidsynth-bass:exciter Out #2" "system:playback_2" )

  (connect  "calf-reverb:reverb Out #1" "system:playback_1")
  (connect  "calf-reverb:reverb Out #2" "system:playback_2")
  (connect "Hydrogen:out_L" "calf-reverb:reverb In #1")
  (connect "Hydrogen:out_R" "calf-reverb:reverb In #2")
  (connect "zynaddsubfx_quasijazzer0:out_1" "system:playback_1")
  (connect "zynaddsubfx_quasijazzer0:out_2" "system:playback_2")
  (disconnect "Hydrogen:out_L" "system:playback_1")
  (disconnect "Hydrogen:out_R" "system:playback_2")
  (play)
  )

(define (session-end)
  (clear-newp)
  (close))




; (session-start)
; (session-end)

; vim: filetype=scheme expandtab :
